from typing import Any, ClassVar, List, Tuple

from typing import overload

class Color:
    a: int
    b: int
    g: int
    r: int
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

class Perlin:
    def __init__(self, arg0: float, arg1: int, arg2: Vec, arg3: int) -> None: ...
    def gen_1d(self, arg0: int) -> float: ...
    def gen_2d(self, arg0: int, arg1: int) -> float: ...
    def gen_image(self, arg0: str) -> None: ...

class Physics:
    def __init__(self) -> None: ...
    def add_circle(self, arg0: Vec, arg1: float, arg2: float) -> PhysicsObject: ...
    def add_rect(self, arg0: Vec, arg1: Vec, arg2: float) -> PhysicsObject: ...
    def draw_dbg(self, arg0: Color) -> None: ...
    def is_running(self) -> bool: ...
    def set_gravity(self, arg0: Vec) -> None: ...
    def set_timestep(self, arg0: float) -> None: ...
    def start(self, arg0: Vec) -> None: ...
    def stop(self) -> None: ...
    def __len__(self) -> int: ...

class PhysicsObject:
    active: bool
    angle: float
    angle_velocity: float
    position: Vec
    velocity: Vec
    def __init__(self) -> None: ...
    def add_force(self, arg0: Vec) -> None: ...
    def add_torque(self, arg0: float) -> None: ...
    def remove(self) -> None: ...
    def set_dynamic_friction(self, arg0: float) -> None: ...
    def set_mass(self, arg0: float) -> None: ...
    def set_restitution(self, arg0: float) -> None: ...
    def set_static_friction(self, arg0: float) -> None: ...
    def set_use_angle(self, arg0: bool) -> None: ...
    def set_use_gravity(self, arg0: bool) -> None: ...
    def __del__(self) -> None: ...
    @property
    def is_on_floor(self) -> bool: ...

class Vec:
    __hash__: ClassVar[None] = ...
    x: float
    y: float
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...
    @overload
    def __init__(self, arg0: tuple) -> None: ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def is_zero(self) -> bool: ...
    def random(self, arg0: float, arg1: float) -> None: ...
    def random_vec(self, *args, **kwargs) -> Any: ...
    def to_int(self) -> Vec: ...
    @overload
    def __add__(self, arg0: Vec) -> Vec: ...
    @overload
    def __add__(self, arg0: float) -> Vec: ...
    def __eq__(self, arg0: Vec) -> bool: ...
    def __getstate__(self) -> tuple: ...
    @overload
    def __mul__(self, arg0: Vec) -> Vec: ...
    @overload
    def __mul__(self, arg0: float) -> Vec: ...
    def __ne__(self, arg0: Vec) -> bool: ...
    def __setstate__(self, arg0: tuple) -> None: ...
    @overload
    def __sub__(self, arg0: Vec) -> Vec: ...
    @overload
    def __sub__(self, arg0: float) -> Vec: ...
    @overload
    def __truediv__(self, arg0: Vec) -> Vec: ...
    @overload
    def __truediv__(self, arg0: float) -> Vec: ...

class Win:
    camera_offset: Vec
    camera_pos: Vec
    camera_zoom: float
    def __init__(self) -> None: ...
    def camera_follow_rect(self, arg0: Vec, arg1: Vec, arg2: float, arg3: float, arg4: float) -> None: ...
    def col_circle_circle(self, arg0: Vec, arg1: float, arg2: Vec, arg3: float) -> bool: ...
    def col_circle_point(self, arg0: Vec, arg1: float, arg2: Vec) -> bool: ...
    def col_rect_circle(self, arg0: Vec, arg1: Vec, arg2: Vec, arg3: float) -> bool: ...
    def col_rect_point(self, arg0: Vec, arg1: Vec, arg2: Vec) -> bool: ...
    def col_rect_rect(self, arg0: Vec, arg1: Vec, arg2: Vec, arg3: Vec) -> bool: ...
    def draw_circle(self, arg0: Vec, arg1: float, arg2: Color) -> None: ...
    def draw_circleline(self, arg0: Vec, arg1: float, arg2: Color) -> None: ...
    def draw_image(self, arg0: int, arg1: Vec, arg2: Vec, arg3: float) -> None: ...
    def draw_image_scale(self, arg0: int, arg1: Vec, arg2: float, arg3: float) -> None: ...
    def draw_line(self, arg0: Vec, arg1: Vec, arg2: Color) -> None: ...
    def draw_line_bezier(self, arg0: Vec, arg1: Vec, arg2: Vec, arg3: Vec, arg4: Color) -> None: ...
    def draw_rect(self, arg0: Vec, arg1: Vec, arg2: Color) -> None: ...
    def draw_rectgradient(self, arg0: Vec, arg1: Vec, arg2: Color, arg3: Color, arg4: Color, arg5: Color) -> None: ...
    def draw_rectline(self, arg0: Vec, arg1: Vec, arg2: Color) -> None: ...
    def draw_rectrot(self, arg0: Vec, arg1: Vec, arg2: float, arg3: Color) -> None: ...
    def draw_rectround(self, arg0: Vec, arg1: Vec, arg2: float, arg3: Color) -> None: ...
    def draw_text(self, arg0: str, arg1: Vec, arg2: float, arg3: Color) -> None: ...
    def get_image_pixels(self, arg0: int) -> List[Color]: ...
    def get_image_size(self, arg0: int) -> Vec: ...
    def get_key_code(self) -> int: ...
    def get_monitor_name(self) -> str: ...
    def get_monitor_refresh_rate(self) -> float: ...
    def get_monitor_size(self) -> Vec: ...
    def get_points_clusters(self, arg0: List[Vec], arg1: float) -> List[Tuple[Vec,Vec]]: ...
    def get_render_size(self) -> Vec: ...
    def is_key_down(self, arg0: int) -> bool: ...
    def is_key_pressed(self, arg0: int) -> bool: ...
    def is_key_release(self, arg0: int) -> bool: ...
    def is_key_up(self, arg0: int) -> bool: ...
    def is_loading(self) -> bool: ...
    def is_mouse_down(self) -> bool: ...
    def is_mouse_pressed(self) -> bool: ...
    def is_mouse_release(self) -> bool: ...
    def is_mouse_up(self) -> bool: ...
    def is_ready(self) -> bool: ...
    def is_running(self) -> bool: ...
    def load_font(self, arg0: str) -> int: ...
    def load_image(self, arg0: str) -> int: ...
    def on_close(self) -> None: ...
    def on_draw(self, arg0: float) -> None: ...
    def on_draw_background(self, arg0: float) -> None: ...
    def on_draw_loading(self, arg0: float) -> None: ...
    def on_draw_ui(self, arg0: float) -> None: ...
    def on_load(self) -> None: ...
    def on_ready(self) -> None: ...
    def set_font(self, arg0: int) -> None: ...
    def start(self, width: int = ..., height: int = ..., title: str = ..., fullscreen: bool = ...) -> None: ...
    def stop(self) -> None: ...
    def text_size(self, arg0: str, arg1: float) -> Vec: ...
    @property
    def mouse(self) -> Vec: ...
    @property
    def wheel(self) -> float: ...
